[{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Modules\\MySqlModule.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Modules\\groupDates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Routes\\Api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Routes\\AuthRoute.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":10,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[284,313],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'session' is assigned a value but never used.","line":11,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"session"},"fix":{"range":[315,358],"text":""},"desc":"Remove unused variable 'session'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":38,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"req"},"fix":{"range":[1231,1235],"text":""},"desc":"Remove unused variable 'req'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'res' is defined but never used.","line":38,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"res"},"fix":{"range":[1234,1239],"text":""},"desc":"Remove unused variable 'res'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Created 08/07/2025 by Tommy Mannix\r\n\r\n////////////////////////////////////////////////////////\r\n////////// This route caters for all /auth routes\r\n////////////////////////////////////////////////////////\r\n\r\n\r\nconst express = require(\"express\");\r\nconst router =  express.Router();\r\nconst path = require('path');\r\nconst session = require('express-session');\r\nconst validation = require('../middleware/Validation');\r\nconst { validationResult } = require('express-validator');\r\nconst rateLimiting = require('../middleware/rateLimit')\r\n/////////////////////////////////////////////////////////\r\n////// Middle ware that will be needed for route/////////\r\n// Check authorisation of express sessions \r\nconst CheckAuth = require('../middleware/checkauth');\r\n\r\n//get the hasing middleware\r\nconst hashing = require('../middleware/Hashing');\r\n\r\n\r\n// get mysql module middleware \r\nconst MySqlModule = require('../Modules/MySqlModule');\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             Start of routes     ///////////////////\r\n\r\n\r\n//// Default GET Route for /auth\r\n router.get('/', async(req, res) => {\r\n    res.redirect('./auth/login');\r\n });\r\n\r\n\r\n //// Default POST Route for /auth\r\n router.post('/', async(req, res) => {\r\n\r\n  \r\n});\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             /auth/login         ///////////////////\r\n\r\n\r\n////  GET Route for /auth/Login\r\nrouter.get('/login', async(req, res) => {\r\n    \r\n\r\n         res.render('../Views/~login/login');\r\n\r\n\r\n});\r\n\r\n//// Default POST Route for /auth/login\r\n// Destroy the session object and log the user out\r\nrouter.post('/login',rateLimiting.loginLimiter,validation.validateLogin, async(req, res) => {\r\n\r\n\r\n  // check the validation\r\n  const errors = validationResult(req);\r\n  // if there is an error that is detected from the validation\r\n  if (!errors.isEmpty()) {\r\n    // get the first error\r\n    const firstError = errors.array()[0].msg;\r\n    // flash the first error\r\n    req.flash('error_msg', firstError);\r\n    // redirect out\r\n    res.redirect('/auth/login');\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n// get password passed from front end\r\n  const password = req.body.password;\r\nconst username = req.body.email;\r\n\r\n\r\ntry{\r\n\r\n// retrieve the users credentials from the database\r\nconst hashedpassword = await MySqlModule.gethash(username);\r\n// convert the database row to JSON\r\nconst jsonRow = JSON.parse(JSON.stringify(hashedpassword[0]));\r\n// test plain text password against hashed version\r\n\r\n\r\nconst testvalue = await hashing.verifyhash(password,jsonRow[0].Password)\r\n\r\n// if it matches assign a session id and move on \r\nif(testvalue){\r\n// assing the userID into the session\r\n  req.session.userID = jsonRow[0].UserID; // Set session identifie\r\n\r\n// get the logged in users name \r\n  const userdata = await MySqlModule.GetUserInfoLogin(req.session.userID);\r\n\r\n\r\n  const jsonUserData = JSON.parse(JSON.stringify(userdata[0]));\r\n\r\n// enter the users name into a session object\r\n  req.session.userName = jsonUserData[0].FirstName + \" \" + jsonUserData[0].Surname;\r\n  // redirect to the home page now authenticated\r\n  res.redirect('/home');\r\n  \r\n}\r\n// otherwise flash an error message\r\nelse\r\n{\r\n\r\nreq.flash('error_msg', 'Invalid username or password');\r\nreturn res.redirect('/auth/login');\r\n}\r\n\r\n\r\n}\r\ncatch (err){\r\n\r\n  console.log(err)\r\n  req.flash('error_msg', 'Invalid username or password');\r\n return res.redirect('/auth/login');\r\n}\r\n\r\n\r\n\r\n  });\r\n  \r\n\r\n//////////////////////////////////////////////////////////\r\n//////             /auth/logout         ///////////////////\r\n\r\n\r\n//// Default POST Route for /auth/logout\r\n// Destroy the session object and log the user out\r\nrouter.post('/logout', CheckAuth.requireAuth, async(req, res) => {\r\n\r\n\r\nreq.session.destroy();\r\n res.redirect(\"/auth/login\");\r\n});\r\n\r\n\r\n////  GET Route for /auth/logout\r\nrouter.get('/logout', CheckAuth.requireAuth, async(req, res) => {\r\n  req.session.destroy();\r\n res.redirect(\"/auth/login\");\r\n});\r\n\r\n\r\n \r\n\r\n//// Default POST Route for /auth/logout\r\n// Destroy the session object and log the user out\r\nrouter.post('/Create',validation.validateRegister, async(req, res) => {\r\n  \r\n\r\n  // check the validation\r\n  const errors = validationResult(req);\r\n  // if there is an error that is detected from the validation\r\n  if (!errors.isEmpty()) {\r\n\r\n    // get the first error\r\n    const firstError = errors.array()[0].msg;\r\n    // flash the first error\r\n    req.flash('error_msg', firstError);\r\n    // redirect out\r\n    res.redirect('/auth/create');\r\n  }\r\n\r\ntry{\r\n  // store the passed values from the body\r\n  const email = req.body.email;\r\n  const Fname= req.body.FName;\r\n  const Sname= req.body.SName;\r\n  const plaintextPassword = req.body.Password;\r\n\r\n  // hash the password\r\n  const hashedPassword = await hashing.generatehash(plaintextPassword);\r\n\r\n  // create the user \r\n  const created = await MySqlModule.createUser(email,Fname,Sname,hashedPassword);\r\n\r\n // if there is a new user created\r\n  if(created){\r\n    // flash account created to the user on the log in page\r\n  req.flash('error_msg', 'Account created log in now');\r\nres.redirect('/auth/login');\r\n\r\n  }\r\n  // otherwise show an error\r\n  else{\r\n    req.flash('error_msg', 'user already exists');\r\n    res.redirect('/auth/create');\r\n  }\r\n // req.session.destroy();\r\n   //res.redirect(\"/auth/login\");\r\n  }\r\n  catch{\r\n    req.flash('error_msg', 'unknown error - contact admin');\r\n    res.redirect('/auth/create');\r\n  }\r\n\r\n\r\n  });\r\n\r\n  ////  GET Route for /auth/logout\r\n  router.get('/Create', async(req, res) => {\r\n   // req.session.destroy();\r\n   res.render('../Views/~login/CreateUser');\r\n //  res.redirect(\"/auth/login\");\r\n  });\r\n\r\n\r\n\r\n  module.exports = router","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Routes\\EventsRoute.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[289,318],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MySqlModule' is assigned a value but never used.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"MySqlModule"},"fix":{"range":[566,620],"text":""},"desc":"Remove unused variable 'MySqlModule'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n\r\n// Created 10/07/2025 by Tommy Mannix\r\n\r\n////////////////////////////////////////////////////////\r\n////////// This route caters for all /event routes\r\n////////////////////////////////////////////////////////\r\n\r\n\r\nconst express = require(\"express\");\r\nconst router =  express.Router();\r\nconst path = require('path');\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n////// Middle ware that will be needed for route/////////\r\n// Check authorisation of express sessions for protected end points\r\nconst CheckAuth = require('../middleware/checkauth');\r\nconst MySqlModule = require('../Modules/MySqlModule');\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             Start of routes     ///////////////////\r\n//////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             /event        ///////////////////\r\n\r\n//////////////// This the events page as a rendered page\r\n///////////////\r\nrouter.get('/', CheckAuth.requireAuth, async(req, res) => {\r\n  try{\r\n    res.render('../Views/~Event/Events');\r\n  }\r\n  catch{\r\n    res.json(\"no events\")\r\n  }\r\n      \r\n   });\r\n  \r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n  module.exports = router","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Routes\\HomeRoute.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[288,317],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":35,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"req"},"fix":{"range":[1107,1111],"text":""},"desc":"Remove unused variable 'req'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'res' is defined but never used.","line":35,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"res"},"fix":{"range":[1110,1115],"text":""},"desc":"Remove unused variable 'res'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n\r\n// Created 08/07/2025 by Tommy Mannix\r\n\r\n////////////////////////////////////////////////////////\r\n////////// This route caters for all /home routes\r\n////////////////////////////////////////////////////////\r\n\r\n\r\nconst express = require(\"express\");\r\nconst router =  express.Router();\r\nconst path = require('path');\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n////// Middle ware that will be needed for route/////////\r\n// Check authorisation of express sessions for protected end points\r\nconst CheckAuth = require('../middleware/checkauth');\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             Start of routes     ///////////////////\r\n//////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             /home        ///////////////////\r\n router.get('/', CheckAuth.requireAuth, async(req, res) => {\r\n     console.log(req.session.userName)\r\n      res.render('../Views/~home/index', {username:req.session.userName});\r\n    \r\n });\r\n\r\n router.post('/', CheckAuth.requireAuth, async(req, res) => {\r\n\r\n  \r\n});\r\n\r\n\r\n\r\n  module.exports = router","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\Routes\\TasksRoute.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[289,318],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MySqlModule' is assigned a value but never used.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"MySqlModule"},"fix":{"range":[566,620],"text":""},"desc":"Remove unused variable 'MySqlModule'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n\r\n// Created 15/07/2025 by Tommy Mannix\r\n\r\n////////////////////////////////////////////////////////\r\n////////// This route caters for all /tasks routes\r\n////////////////////////////////////////////////////////\r\n\r\n\r\nconst express = require(\"express\");\r\nconst router =  express.Router();\r\nconst path = require('path');\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n////// Middle ware that will be needed for route/////////\r\n// Check authorisation of express sessions for protected end points\r\nconst CheckAuth = require('../middleware/checkauth');\r\nconst MySqlModule = require('../Modules/MySqlModule');\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             Start of routes     ///////////////////\r\n//////////////////////////////////////////////////////////\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n//////             /tasks        ///////////////////\r\n\r\n//////////////// This the events page as a rendered page\r\n///////////////\r\nrouter.get('/', CheckAuth.requireAuth, async(req, res) => {\r\n  try{\r\n    res.render('../Views/~Task/Task');\r\n  }\r\n  catch{\r\n    res.json(\"no events\")\r\n  }\r\n      \r\n   });\r\n  \r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n  module.exports = router","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\__tests__\\IntegrationTests\\Login.Test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":16,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":21,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":27,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":39,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":48,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":56,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":63,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":73,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":74,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":84,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":90,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":91,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":11}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n//////// Created 09/07/2025 by Tommy Mannix \r\n\r\n\r\n///////////////// Unit test suite/////////////////////////////\r\n/// This test suite test the authentication of users within the system\r\n\r\n\r\nconst request = require('supertest');\r\nconst { JSDOM } = require('jsdom');\r\nconst app = require('../../index'); // your Express app must export `app`\r\nconst supertestSession = require('supertest-session');\r\n\r\nlet testSession = null;\r\n\r\nbeforeEach(() => {\r\n  testSession = supertestSession(app);\r\n});\r\n\r\n\r\ndescribe('INTEGRATION TESTS - Login Authentication tests', () => {\r\n\r\n  let cookie;\r\n\r\n//////////////////// Test 1 - Authorised user accessing the system/////////////////\r\n////////// Pass conditions - User can accesss the home page ///////////////////////\r\n  test('Login and access index with session - Correct credentials', async () => {\r\n\r\n    /// send request to server with the email and password body \r\n    const loginResponse = await testSession\r\n      .post('/auth/login')\r\n      .type('form') \r\n      .send({\r\n        email: 'test@test.com', /////// Working credentials\r\n        password: 'Password',\r\n      });\r\n\r\n      /// for it to be successful the server should respond with a redirect (302 message)\r\n    expect(loginResponse.statusCode).toBe(302);\r\n    // A cookie should also be set \r\n   // expect(loginResponse.headers.location).toBe('/home');\r\n\r\n  \r\n    // follow the redirect to its destination\r\n    const indexResponse = await testSession.get('/home');\r\n\r\n      // response should be 200 or OK showing page rendered\r\n    expect(indexResponse.statusCode).toBe(200);\r\n\r\n    // now check the DOM object to ensure that it is showing the right page\r\n    const dom = new JSDOM(indexResponse.text);\r\n\r\n    console.log(dom.window.document.body.innerHTML)\r\n    const heading = dom.window.document.querySelector('h2.TextAlignCenter');\r\n    expect(heading).not.toBeNull();\r\n    expect(heading.textContent.trim()).toBe('Weekly report');\r\n  });\r\n\r\n\r\n\r\n  //////////////////// Test 2 - unAuthorised user accessing the system/////////////////\r\n////////// Pass conditions - User is redirected to the login page///////////////////////\r\n  test('Login and access index with session - InCorrect credentials', async () => {\r\n    // Step 1: Log in\r\n    const loginResponse = await request(app)\r\n      .post('/auth/login')\r\n      .type('form') \r\n      .send({\r\n        email: 'test@test.com', /// incorrect credentials within the system\r\n        password: 'password',\r\n      });\r\n\r\n    expect(loginResponse.statusCode).toBe(302); \r\n    expect(loginResponse.headers['set-cookie']).toBeDefined();\r\n\r\n    let redirectedPath = loginResponse.headers.location;\r\n    // Step 2: Extract session cookie\r\n    cookie = loginResponse.headers['set-cookie'][0];\r\n    // Step 3: Follow redirect to index/dashboard page with session\r\n    const indexResponse = await request(app)\r\n      .get(redirectedPath) \r\n      .set('Cookie', cookie);\r\n\r\n    expect(indexResponse.statusCode).toBe(200);\r\n\r\n    const dom = new JSDOM(indexResponse.text);\r\n    \r\n    const heading = dom.window.document.querySelector('h1');\r\n  \r\n    expect(heading).not.toBeNull();\r\n    expect(heading.textContent.trim()).toBe('Login');\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\__tests__\\Unit tests\\DatabaseUnitTests.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'beforeAll' is not defined.","line":14,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'afterAll' is not defined.","line":18,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":22,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":26,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":28,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":29,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":35,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":37,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":40,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":46,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":48,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":51,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":9}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n//////// Created 11/07/2025 by Tommy Mannix \r\n\r\n\r\n///////////////// Unit test suite/////////////////////////////\r\n//// These unit tests are designed to test the Database module and \r\n/// ensure that values are correctly returned\r\n\r\n\r\n//get mysql module\r\nconst mysqlmodule = require('../../Modules/MySqlModule');\r\n\r\n\r\nbeforeAll(async () => {\r\n  await mysqlmodule.initDbConnection();\r\n});\r\n\r\nafterAll(() => {\r\n  mysqlmodule.closeConnection();\r\n});\r\n// unit tests hashing checks\r\ndescribe('Database Unit Tests', () => {\r\n\r\n/////////// Test 1 ///////////////////////////////////////\r\n////////// get hashed password for a user attempting login \r\ntest('get hashed password for a user attempting login ', async () => {\r\n  const result = await mysqlmodule.gethash(\"test@test.com\");\r\n  expect(result).toBeDefined();\r\n  expect(result[0][0].Password).toBe('$2b$10$pwuqnp4J4VvR5bP5UoNCcOrvHWNxZd84dG24G20oWNXlrECIL/B8a');\r\n\r\n});\r\n\r\n/////////// Test 2 ///////////////////////////////////////\r\n////////// get User information for a confirmed user \r\ntest('get User information for a confirmed user after authentication ', async () => {\r\n  const result = await mysqlmodule.GetUserInfoLogin(1);\r\n  expect(result).toBeDefined();\r\n\r\n  console.log(result[0][0])\r\n  expect(result[0][0].FirstName).toBe('Test');\r\n});\r\n\r\n\r\n/////////// Test 3 ///////////////////////////////////////\r\n////////// get User information for a confirmed user \r\ntest(' get User information for a confirmed user a', async () => {\r\n  const result = await mysqlmodule.GetUserInfoLogin(1);\r\n  expect(result).toBeDefined();\r\n\r\n  console.log(result[0][0])\r\n  expect(result[0][0].FirstName).toBe('Test');\r\n});\r\n\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\__tests__\\Unit tests\\HashingTests.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":13,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":16,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":18,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":24,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":26,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":9}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n//////// Created 09/07/2025 by Tommy Mannix \r\n\r\n\r\n///////////////// Unit test suite/////////////////////////////\r\n//// This unit tests the hashing module to ensure that values are compard correctly\r\n\r\n\r\n//get the hasing middleware\r\nconst hashing = require('../../middleware/Hashing');\r\n\r\n// unit tests hashing checks\r\ndescribe('Password hash verification', () => {\r\n\r\n////////// Matching passwords\r\ntest('compare plain text to hashed - correct plaintext', async () => {\r\n  const result = await hashing.verifyhash(\"Password\", \"$2b$10$WoIbeWRgomAqJoeoH4scnuZKhXhMcI8Q.ELxfo2LX5TCfb24X3bqa\");\r\n  expect(result).toBe(true);\r\n});\r\n\r\n\r\n/// non-matching passwords\r\n\r\ntest('compare plain text to hashed - incorrect plaintext', async () => {\r\n  const result = await hashing.verifyhash(\"password\", \"$2b$10$WoIbeWRgomAqJoeoH4scnuZKhXhMcI8Q.ELxfo2LX5TCfb24X3bqa\");\r\n  expect(result).toBe(false);\r\n});\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\__tests__\\runAllTests.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"describe('Unit Tests', () => {\r\n    require('./Unit tests/DatabaseUnitTests.test');\r\n    require('./Unit tests/HashingTests.test');\r\n  });\r\n  \r\n  describe('Integration Tests', () => {\r\n    require('./IntegrationTests/Login.Test');\r\n\r\n  });","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\eslint.config.mjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":2,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// eslint.config.js\nimport js from \"@eslint/js\";\nimport globals from \"globals\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n  {\n    files: [\"**/*.{js,cjs,mjs}\"],\n    languageOptions: {\n      globals: globals.node,         // ✅ Node.js global vars like `process`\n      sourceType: \"commonjs\",        // ✅ Support for `require`, `module.exports`\n    },\n    plugins: {\n      js,\n    },\n    extends: [\"js/recommended\"],\n  }\n]);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\FlashMessages.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'flash' is assigned a value but never used.","line":8,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"flash"},"fix":{"range":[292,331],"text":""},"desc":"Remove unused variable 'flash'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n\r\n// Created 09/07/2025 by Tommy Mannix\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n//// This middleware  sets up the use of flash middle ware for error messages \r\n/////////////////////////////////////////////////////////////////////////////////\r\nconst flash = require('connect-flash');\r\n// check the authorisation from the session values\r\nconst flashmessages = (req, res, next) => {\r\n\r\n    res.locals.success_msg = req.flash('success_msg');\r\n    res.locals.error_msg = req.flash('error_msg');\r\n    next();\r\n}\r\n\r\n\r\nmodule.exports = {flashmessages}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\Hashing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\HelmetSetup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\SessionDetails.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\Validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\checkauth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\middleware\\rateLimit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\minimaljestreport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\public\\Javascript\\Events\\AddClick.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":4,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":8,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":14,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'memberlist' is assigned a value but never used.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"memberlist"},"fix":{"range":[497,541],"text":""},"desc":"Remove unused variable 'memberlist'."}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":26,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'alert' is not defined.","line":39,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'alert' is not defined.","line":52,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":58,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":62,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":30}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Call it on page load\r\n\r\n\r\nconst CreateEventButton = document.getElementById('CreateEventButton');\r\nCreateEventButton.addEventListener('click', openCreateModel);\r\n\r\n\r\nconst CloseModelCreateButton = document.getElementById('closeCreateModalBtn');\r\nCloseModelCreateButton.addEventListener('click', closeCreateModel);\r\n\r\nasync function openCreateModel(){\r\n\r\n// select the model and target its content\r\nconst modal = document.getElementById('CreateModel');\r\n\r\nmodal.classList.remove('hidden');\r\n\r\n\r\nconst memberlist = await getListofMembers();\r\nconst eventlist = await getListofEvents();\r\npopulateEventTypeSelect(eventlist);\r\n\r\n}\r\n\r\nfunction closeCreateModel(){\r\n    const modal = document.getElementById('CreateModel');\r\n    modal.classList.add('hidden');\r\n}\r\n\r\n\r\nasync function getListofEvents(){\r\n    try {\r\n        // get the list of events from the endpoint\r\n        const eventlist = await fetch('/api/getListOfEventTypes');\r\n        const data = await eventlist.json()\r\nreturn data;\r\n    }\r\n    catch{\r\n        alert(\"error\");\r\n    }\r\n}\r\n\r\n\r\nasync function getListofMembers(){\r\n    try {\r\n        // get the list of events from the endpoint\r\n        const memberlist = await fetch('/api/getMembersInAllGroups');\r\n        const data = await memberlist.json()\r\nreturn data;\r\n    }\r\n    catch{\r\n        alert(\"error\");\r\n    }\r\n}\r\n\r\n\r\nfunction populateEventTypeSelect(eventTypes) {\r\n    const select = document.getElementById('EventType');\r\n    select.innerHTML = ''; // Clear any existing options\r\n  \r\n    eventTypes.forEach(type => {\r\n      const option = document.createElement('option');\r\n      option.value = type.EventTypeID;   // Adjust key names as per your API\r\n      option.textContent = type.EventTypeName;\r\n      select.appendChild(option);\r\n    });\r\n  }","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\public\\Javascript\\Events\\EventClick.js","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":15,"column":6,"nodeType":"BlockStatement","messageId":"unexpected","endLine":17,"endColumn":2,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[395,399],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showEventModal' is defined but never used.","line":22,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"showEventModal"},"fix":{"range":[488,2382],"text":""},"desc":"Remove unused variable 'showEventModal'."}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":29,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":30,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":83,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":84,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":88,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":88,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":90,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":15}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Created 15/07/2025 by Tommy Mannix\r\n// This script opens a full page model which will display the chosen events information\r\n\r\n\r\n\r\n\r\nasync function GetandRenderEventDetail(eventID){\r\ntry{\r\n      // get the list of events from the endpoint\r\n      const response = await fetch(`/api/getEventDetail?EventID=${eventID}`);\r\n      const details = await response.json();\r\nreturn details\r\n\r\n}\r\ncatch{\r\n\r\n}\r\n}\r\n\r\n\r\n// show the modal box pass in the event information from the list generated, \r\nasync function showEventModal(event) {\r\n  console.log(\"test\")\r\n// get the pressed event information based on the item clicked\r\n    const eventdetails = await GetandRenderEventDetail(event.EventID);\r\n\r\n\r\n    // select the model and target its content\r\n    const modal = document.getElementById('eventModal');\r\n    const content = document.getElementById('modalEventDetails');\r\n  \r\n\r\n   // parse the attendees list from a string into a JSON file\r\n   const attendeeslist = JSON.parse(eventdetails[0].Attendees)\r\n\r\n   // find how many attendees there are for the event\r\n   const attendeeNum = attendeeslist.length;\r\n   // filter it down to accepted and declined to be shown on the interface\r\n   const accepted = attendeeslist.filter(a => a.ResponseStatus === 'Accepted');\r\n   const declined = attendeeslist.filter(a => a.ResponseStatus === 'Declined');\r\n   \r\n   \r\n   \r\n\r\n\r\n    content.innerHTML = `\r\n\r\n    <div class=\"eventDetails\">\r\n    <div class=\"attendingStatus\">${eventdetails[0].EventResponseForUser}</div>\r\n\r\n    <div class=\"attendeeStats\">\r\n    <p id = \"invited\"><strong>Invited:</strong> ${attendeeNum}</p>\r\n    <p id = \"accepted\"><strong>Accepted:</strong> ${accepted.length}</p>\r\n    <p id = \"declined\"><strong>Declined:</strong> ${declined.length}</p>\r\n   \r\n  </div>\r\n\r\n    <div class=\"eventDate\">${new Date(eventdetails[0].EventDate).toLocaleDateString('en-GB')}</div>\r\n    <h2 class=\"eventTitle\">${eventdetails[0].EventName}</h2>\r\n    <p class=\"eventSubtext\">${eventdetails[0].shortdesc || ''}</p>\r\n  \r\n   \r\n  \r\n    <div class=\"eventDescription\">\r\n      <strong>Description</strong>\r\n      <p> ${eventdetails[0].EventDescription || 'No description available.'}</p>\r\n    </div>\r\n\r\n    <div class=\"eventLocation\">\r\n    <strong>Location</strong><br>\r\n    14 Waverly Lane<br>\r\n    Mansfield<br>\r\n    NG18 4HD\r\n  </div>\r\n  </div>\r\n  \r\n    `;\r\n  \r\n    modal.classList.remove('hidden');\r\n  }\r\n  \r\n  // Close modal when clicking the X\r\n  document.getElementById('closeModalBtn').addEventListener('click', () => {\r\n    document.getElementById('eventModal').classList.add('hidden');\r\n  });\r\n  \r\n  // Optional: close modal on ESC key\r\n  document.addEventListener('keydown', (e) => {\r\n    if (e.key === 'Escape') {\r\n      document.getElementById('eventModal').classList.add('hidden');\r\n    }\r\n  });\r\n  ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\public\\Javascript\\Events\\getEvents.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":12,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":29,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":33,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":39,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":45,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":49,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":54,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":59,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":67,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'showEventModal' is not defined.","line":82,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":94,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":104,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":9}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"async function fetchAndRenderEvents() {\r\n  \r\n  try {\r\n\r\n    // get the list of events from the endpoint\r\n    const response = await fetch('/api/getEventList');\r\n\r\n    // convert to JSON\r\n    const groupedEvents = await response.json();\r\n\r\n    // Target the container for the events\r\n    const container = document.getElementById('eventContainer');\r\n\r\n    // clear it \r\n    container.innerHTML = ''; \r\n\r\n    // if there are no events in the request then output that there are no events\r\n    if (!groupedEvents || isEventListEmpty(groupedEvents)) {\r\n      container.innerHTML = '<p>No upcoming events found.</p>';\r\n      return;\r\n    }\r\n\r\n    // Loop through each group (Today, August, etc.)\r\n    Object.entries(groupedEvents).forEach(([groupName, events]) => {\r\n\r\n      if (!Array.isArray(events) || events.length === 0) return;\r\n\r\n      // Create wrapper for each month/group\r\n      const groupWrapper = document.createElement('section');\r\n      groupWrapper.className = 'EventGroup';\r\n\r\n      // create the heading for the group i.e. today, august, etc.\r\n      const header = document.createElement('h2');\r\n      header.textContent = groupName;\r\n      header.className = 'EventHeader';\r\n      groupWrapper.appendChild(header); // ⬅️ correct: header goes in wrapper\r\n\r\n      // Container for that group's events\r\n      const groupEventContainer = document.createElement('div');\r\n      groupEventContainer.className = 'EventContainer';\r\n\r\n      // iterate through the group for each event...\r\n      events.forEach(event => {\r\n        // create a div element for the outer event container\r\n        const eventItem = document.createElement('div');\r\n        eventItem.className = 'EventItem hardbox';\r\n\r\n        // add the event type\r\n        const type = document.createElement('p');\r\n        type.className = 'EventType';\r\n        type.textContent = event.EventTypeName;\r\n\r\n        // add the title\r\n        const title = document.createElement('h3');\r\n        title.className = 'EventCardTitle';\r\n        title.textContent = event.EventName;\r\n\r\n        // add the date\r\n        const date = document.createElement('p');\r\n        date.className = 'EventCardDate';\r\n        // set the date format to be in UK standard as DDMMYYYY\r\n        date.textContent = new Date(event.EventDate).toLocaleDateString('en-GB', {\r\n          day: 'numeric', month: 'long', year: 'numeric'\r\n        });\r\n\r\n        // add the link to view more \r\n        const viewMore = document.createElement('a');\r\n        viewMore.className = 'viewmore';\r\n        viewMore.href = '#'; // or link to event details\r\n        viewMore.textContent = 'View info';\r\n\r\n        // Append all elements to the event card\r\n        eventItem.appendChild(type);\r\n        eventItem.appendChild(title);\r\n        eventItem.appendChild(date);\r\n        eventItem.appendChild(viewMore);\r\n\r\n        // append the event card to the group container\r\n        groupEventContainer.appendChild(eventItem);\r\n\r\n        eventItem.addEventListener('click', () => {\r\n          showEventModal(event);\r\n        });\r\n      });\r\n\r\n      // append the group container to the group wrapper\r\n      groupWrapper.appendChild(groupEventContainer);\r\n\r\n      // append the group wrapper to the main event container\r\n      container.appendChild(groupWrapper);\r\n    });\r\n  } catch (err) {\r\n    console.error('Failed to fetch events:', err);\r\n    document.getElementById('eventContainer').innerHTML = '<p>Error loading events.</p>';\r\n  }\r\n}\r\n\r\n// check if all event groups are empty\r\nfunction isEventListEmpty(groupedEvents) {\r\n  return Object.values(groupedEvents).every(group => Array.isArray(group) && group.length === 0);\r\n}\r\n\r\n// Call it on page load\r\ndocument.addEventListener('DOMContentLoaded', fetchAndRenderEvents);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\man106271\\Documents\\GitHub\\Family-Planner-CW2\\public\\Javascript\\Tasks\\getTasks.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":21,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":38,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":42,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":48,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":54,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":58,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":63,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":68,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":76,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":103,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":13},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":132,"column":8,"nodeType":"BlockStatement","messageId":"unexpected","endLine":134,"endColumn":4,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4475,4483],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":180,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":181,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":210,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":210,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":232,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":232,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":233,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":233,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":237,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":237,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":239,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":239,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":272,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":272,"endColumn":9}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Created 15/07/2025 by Tommy Mannix\r\n// This script fetches and renders a list of tasks for the logged in user \r\n// it then assigns an event listener to each event which opens a model box\r\n// the script then fetches a detailed view of the task and shows it on screen\r\n\r\n\r\n\r\n\r\n// fetch and render the global task list and populate the task container\r\nasync function fetchAndRenderTasks() {\r\n  \r\n  try {\r\n\r\n    // get the list of Tasks from the endpoint\r\n    const response = await fetch('/api/getTaskList');\r\n\r\n    // convert to JSON\r\n    const groupedEvents = await response.json();\r\n\r\n    // Target the container for the events\r\n    const container = document.getElementById('TaskContainer');\r\n\r\n    // clear it \r\n    container.innerHTML = ''; \r\n\r\n    // if there are no events in the request then output that there are no events\r\n    if (!groupedEvents || isEventListEmpty(groupedEvents)) {\r\n      container.innerHTML = '<p>No upcoming events found.</p>';\r\n      return;\r\n    }\r\n\r\n    // Loop through each group (Today, August, etc.)\r\n    Object.entries(groupedEvents).forEach(([groupName, events]) => {\r\n\r\n      if (!Array.isArray(events) || events.length === 0) return;\r\n\r\n      // Create wrapper for each month/group\r\n      const groupWrapper = document.createElement('section');\r\n      groupWrapper.className = 'EventGroup';\r\n\r\n      // create the heading for the group i.e. today, august, etc.\r\n      const header = document.createElement('h2');\r\n      header.textContent = groupName;\r\n      header.className = 'EventHeader';\r\n      groupWrapper.appendChild(header); \r\n\r\n      // Container for that group's events\r\n      const groupEventContainer = document.createElement('div');\r\n      groupEventContainer.className = 'EventContainer';\r\n\r\n      // iterate through the group for each event...\r\n      events.forEach(event => {\r\n        // create a div element for the outer event container\r\n        const eventItem = document.createElement('div');\r\n        eventItem.className = 'EventItem hardbox';\r\n\r\n        // add the event type\r\n        const type = document.createElement('p');\r\n        type.className = 'EventType';\r\n        type.textContent = event.taskTypeName || null;\r\n\r\n        // add the title\r\n        const title = document.createElement('h3');\r\n        title.className = 'EventCardTitle';\r\n        title.textContent = event.taskName;\r\n\r\n        // add the date\r\n        const date = document.createElement('p');\r\n        date.className = 'EventCardDate';\r\n        // set the date format to be in UK standard as DDMMYYYY\r\n        date.textContent = new Date(event.completionDate).toLocaleDateString('en-GB', {\r\n          day: 'numeric', month: 'long', year: 'numeric'\r\n        });\r\n\r\n        // add the link to view more \r\n        const viewMore = document.createElement('a');\r\n        viewMore.className = 'viewmore';\r\n        viewMore.href = '#'; // or link to event details\r\n        viewMore.textContent = 'View info';\r\n\r\n        // Append all elements to the event card\r\n        eventItem.appendChild(type);\r\n        eventItem.appendChild(title);\r\n        eventItem.appendChild(date);\r\n        eventItem.appendChild(viewMore);\r\n\r\n        // append the event card to the group container\r\n        groupEventContainer.appendChild(eventItem);\r\n\r\n        eventItem.addEventListener('click', () => {\r\n          showTaskModal(event);\r\n        });\r\n      });\r\n\r\n      // append the group container to the group wrapper\r\n      groupWrapper.appendChild(groupEventContainer);\r\n\r\n      // append the group wrapper to the main event container\r\n      container.appendChild(groupWrapper);\r\n    });\r\n  } catch (err) {\r\n    console.error('Failed to fetch events:', err);\r\n    document.getElementById('eventContainer').innerHTML = '<p>Error loading events.</p>';\r\n  }\r\n}\r\n\r\n// check if all event groups are empty\r\nfunction isEventListEmpty(groupedEvents) {\r\n  return Object.values(groupedEvents).every(group => Array.isArray(group) && group.length === 0);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This function fetches a detailed JSON file of a selected event, event is \r\n// passed as an object when each button is added an event listener\r\nasync function GetandRenderTaskDetail(event){\r\n  try{\r\n        // get the list of events from the endpoint\r\n        const response = await fetch(`/api/getTaskDetail?taskID=${event.taskID}`);\r\n\r\n        console.log(\"test\")\r\n        \r\n        const details = await response.json();\r\n\r\n        console.log(details)\r\n  return details\r\n  \r\n  }\r\n  catch{\r\n  \r\n  }\r\n  }\r\n  \r\n  // show the modal box, pass in the task information from the list generated\r\nasync function showTaskModal(event) {\r\n  // get the pressed task information based on the item clicked\r\n  const eventdetails = await GetandRenderTaskDetail(event);\r\n\r\n  // convert the task sub items and assigned users into usable JSON arrays\r\n  const subtasks = JSON.parse(eventdetails[0].subtasks);\r\n  const assignedUsers = JSON.parse(eventdetails[0].assignedUsers);\r\n\r\n  // count total number of subtasks\r\n  const subtaskTotal = subtasks.length;\r\n\r\n  // filter to find how many subtasks have been completed\r\n  const completedTasks = subtasks.filter(t => t.subtaskStatus === 1).length;\r\n\r\n  // convert completion date to UK format\r\n  const date = new Date(eventdetails[0].completionDate).toLocaleDateString('en-GB', {\r\n    day: 'numeric', month: 'long', year: 'numeric'\r\n  });\r\n\r\n  // generate HTML to show each subtask as a list item\r\n  // Build subtasks with checkboxes\r\nconst subtaskHTML = subtasks.map(task => `\r\n<li>\r\n  <label class=\"subtaskCheckbox\">\r\n    <input \r\n      type=\"checkbox\" \r\n      ${task.subtaskStatus === 1 ? 'checked' : ''} \r\n      data-subtask-id=\"${task.subtaskID}\"\r\n    >\r\n    <p>${task.subtaskName}${task.completedBy ? ` – <em> completed by ${task.completedBy}</em>` : ''}</p>\r\n  </label>\r\n</li>\r\n`).join('');\r\n\r\n  // generate HTML to show assigned users and indicate who is the creator\r\n  const userHTML = assignedUsers.map(user => `\r\n    <li>\r\n      ${user.fullName} ${user.isCreator ? '<strong>(Owner)</strong>' : ''}\r\n    </li>\r\n  `).join('');\r\n\r\n  // select the modal and target its content\r\n  const modal = document.getElementById('eventModal');\r\n  const content = document.getElementById('modalEventDetails');\r\n\r\n  // inject the content dynamically into the modal\r\n  content.innerHTML = `\r\n    <div class=\"taskDetails\">\r\n      <h2>${eventdetails[0].taskName}</h2>\r\n      <p><strong>Type:</strong> ${eventdetails[0].taskTypeName}</p>\r\n      <p><strong>Due:</strong> ${date}</p>\r\n      <p><strong>Description:</strong> ${eventdetails[0].taskDescription}</p>\r\n      <p><strong>Progress:</strong> ${completedTasks}/${subtaskTotal} complete</p>\r\n\r\n      <h3>Subtasks</h3>\r\n      <ul class=\"subtaskList\">\r\n        ${subtaskHTML}\r\n      </ul>\r\n\r\n      <h3>Assigned To</h3>\r\n      <ul class=\"userList\">\r\n        ${userHTML}\r\n      </ul>\r\n    </div>\r\n  `;\r\n\r\n  // finally, show the modal on screen\r\n  modal.classList.remove('hidden');\r\n\r\n\r\n  \r\n// Add listeners to checkboxes after rendering\r\ndocument.querySelectorAll('.subtaskCheckbox input[type=\"checkbox\"]').forEach(checkbox => {\r\n  // Set initial state\r\n  if (checkbox.checked) {\r\n    console.log(checkbox.checked)\r\n    console.log(checkbox.dataset.subtaskId)\r\n    checkbox.parentElement.classList.add('checked');\r\n  }\r\n\r\n  // Add listener to update style\r\n  checkbox.addEventListener('change', () => {\r\n    console.log(checkbox.checked)\r\n    console.log(checkbox.dataset.subtaskId)\r\n    checkbox.parentElement.classList.toggle('checked', checkbox.checked);\r\n    updateCheckBox(checkbox.dataset.subtaskId,checkbox.checked)\r\n  });\r\n\r\n\r\n});\r\n\r\n}\r\n\r\n// Close modal when clicking the X button\r\ndocument.getElementById('closeModalBtn').addEventListener('click', () => {\r\n  document.getElementById('eventModal').classList.add('hidden');\r\n});\r\n\r\n//  close modal using Escape key for Keyboard users\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (e.key === 'Escape') {\r\n    document.getElementById('eventModal').classList.add('hidden');\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n// send the checkbox update to the database to be stored\r\nasync function updateCheckBox(subtaskID,checkvalue){\r\n  try {\r\n    const response = await fetch('/api/updateSubtask', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        subtaskID: subtaskID,\r\n        checkvalue: checkvalue\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log(\"Update successful:\", result);\r\n    return result;\r\n  } catch (err) {\r\n    console.error(\"Failed to update subtask:\", err);\r\n  }\r\n  }\r\n// Call it on page load and render the task list\r\ndocument.addEventListener('DOMContentLoaded', fetchAndRenderTasks);\r\n","usedDeprecatedRules":[]}]